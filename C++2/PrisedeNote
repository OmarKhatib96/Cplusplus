

Le c++ autorise la généralisation
supporte deux style de programmation :procédurale(comme en c)	
					POO( orientée objet )


Polymorphisme: c'est ce qui fait qu'un langage est orienté objet



const int i=5 # définir i=5




Fonction inline:
	
inline fact (int i)
{
	return i==0 ? 1:i*fact(i-1);

}

il va remplacer l'appel de la fonction par le corps de la fonction lui-même

avantages : performances
inconvénients : taille du code plus grosse

ptab=NULL

on peut pas faire delete []  pTab;
mais on peut faire delete pTab

si mon pointeur n'est pas initialisé alors il est à 0

une référence une fois qu'on l'a affecté à une variable on peut pas la changer


quand on définit une fonction liée à une structure 

void date::affiche()
{

cout <<jour<<'/'<<mois <<'/'<<annee;





destructeur appelé automatiquement quand il y a une déclaration statique de l'objet
quand c une déclaration dynamique--> il faut soit meme appeler un constructeur pour désallouer de la mémoire


}

d.affiche()


conseil implémenter les méthodes à l'extérieur de la fonction




f(i++)
on passe d'abord i a f et ensuite on incrémente 
*cour++=c
(*cour=c)
puis on incrémente cour




this:utilité en liste chaînée


f(const X & x)
{

Quand on crée une fonction qui n'est pas demandée à l'exam on la met en privé


x.readm();


}
il faut que la fonction soit const car x est const,sinon ça marche pas

Si on veut faire des accesseurs on les fait en private:



*************Fonction amies***************************

C'est la classe qui choisit ses amis


Les fonctions amies servent à la surcharge des opérateur
Une fonction membre d'une classe peut être l'amie d'une autre classe


class{
	friend class Y;//On est entrain de dire que toutes les fonctions de Y sont amies de X

};


Une fonction (non membre) friend ne dispose pas de pointeur this car c'est une fonction et non une instance d'une classe

la déclaration friend peut être placée n'importe  ou



Les données membres statiques:la valeur de l'attribut sera identique pour tous les objets de cette classe
Il vaut mieux ne pas le mettre en tant que variable globale car elle n'est utilisée qu'à l'intérieure de la classe
La valeur de l'attribut statique va être modifiée pour toutesles classes


qu'elle soit private ou public j'ai besoin de l'initialiser

j'ai pas besoin d'utiliser une instance(a.i) mais juste abcd::i car il est commun à toutes les classes
il peut y avoir des méthodes statiques mais à conditions qu'elle gère que des trucs statiques et on peut l'appeler à partir d'une instance
un static n'a pas de pointeur this

Pour initialiser un static:
on indique le type et la classe



Surcharge d'opérateurs:



String S,

S.Affiche() pour afficher le contenu

En C++ quelque soit l'opérateur , c'est une fonction



X operator@(X)



	X X::operator@(X x) 
	c'est une fonction appartenenant à la classe X et qui renvoie un objet de classe X et qui prend en paramètre un objet de type X







Si on met un opérateur, dans la plupart des cas il vaut mieux qu'il soit défini en tant que fonction ami
pour les opérateur unaires , vaut mieux les déf inir en tant qu'ami


On ne pourrait pas changer les règles de précédence existences (b+c*a vaudra toujours b+(c*a))


constructeur de conversion=constructeur avec un seul(argument)


C4=C1+3;




class Complex{
	int R,I;
public:
		complex(int r,int i=0):R(r),I(i){}

		complex operator +(const Complex &c)
		{
			return(R+c.R,I+c.I)

		}

		friend Complex operator(const complex &c1,const complex &c2)

		};

		c4=c1+c2
	c4=c1+3-->c4=c1.operator(3) ok
	c4=3+c1--> il va pas réussir à faire 3.operator +(c1)
	c4=operator+(3,c1) dans ce cas ça va marcher grace à la fonction amie



class String

{
	char *ch;
	public:
		void Affiche()const {

			cout <<ch;

}

		}

	N.Affiche();
	


String N;

	N.Affiche();
	cout<<N;
la seule façon d'écrire ça est d'implémenter une fonction amie

cout fait partie de la classe iostream

*****L'opérateur affichage******
class String{

	char* ch;

		public:
			void Affiche(){

				const<<ch;}

			friend ostream &operator <<(ostream &os,const String &P)
		{

		os<<P.ch;//ici on évit de faire os<<P.ch<<"\n":c'est l'utilisateur qui devrait le faire


		return os;//On fait un return os pour pouvoir enchaîner et pouvoir écrire:cout <<Nom<<'/n';(cpris)
		


}


	firend iostream & operator>>(ostream &is,String &P)
		{
			is>>P.ch;


			return is;

		}



String S1("Bonjour") (1)
	S2=S1,(2)
	S3(S1);(3)


S3=S1;(4)
Seules 2 et 3 sont des construct par 
défaut
String &operator =(const &String &P)

{
	delete[]P.ch,P.ch=null;
	Init(P.ch);
	
return *this;


}





Les conversions explicites

une fonction membre S::operator D(),où 






class Rationnel

	{
	long N,D;


	public:
		Rationnel(long n,long d=1):N(n),D(d){

	friend bool operator ==(const Rationnel &R1,const Rationnel &R2)
		{
			return R1.D==R2.D && R1.N==R2.N

	}

	friend bool operator !=(const Rationnel &R1,const Rationnel &R2){



}


pgcd=PGCD(n,1), N=D/pgcd;
D=d:pgcd
}

Le probleme du = du compilateur
quand on fait classe1=classe2



=du compilateur a un défaut il ne se préoccupe pas des pointeurs à l'intérieur des classes




	



cout << Nom


25/09/2018:L'héritage simple

Composition!=héritage




velo 
roue
moteur
Voiture

class Derivee:public Base
(Tout ce qui est public dans base va être public dans l'instance de dérivée)
Derivee Der;
Der.m=1;
Der.p=4;
Der.Base::p=3;(p tel qu'il a été défini dans la base)



Derivee Der;
Base *pb=&Der;pb->m=3;
Der.m=3;
Base & b=Der;
b.n equivaut a Der.n=5;
ce que je peux pas faire
Derivee *pder=pb;(cpris car problème de mémoire)


Employe
|
Manager
|
Directeur

void Manager::affiche()const
{
	cout<<"nom:"<<nom<<'\n';
	//erreur :'nom' est privé dans Employe
}



void Manager::affiche()const{
	Employe::affiche();
	//et non pas affiche();

}






******Des erreurs d'utilisation de fonctions disposant de plusieurs versions peuvent surgir lors de manipulation de pointeurs***********

Manager M;
M.Affiche()//ici c'est l'affichage du manager


//il regarde si Affiche existe dans manager,sinon il regarde dans la classe de base et si elle existe il l'appelle
pareil

Employe *pEmp=&M;
pEmpl=Affich();ici c'est l'affichage de l'employé(interprété comme PtrE->affiche)
Le problème:si on fait un logiciel de paie,il va me sortir le salaire de l'employé

solution:il faut que le compilateur regarde le type de l'objet pointé et il appellera le bonne méthode:on le fait avec virtual

Contraintes de virtual:
Le type d'une fonction virtuelle ne peut être modifié dans la classe dérivée
La fonction  virtuelle doit être définie pour la classe dans laquelle elle est déclarée


Héritage et constructeurs:
Une classe dérivée doit fournir au moins un constructeur lorsque sa classe de base possède plus d'un constructeur ou un constructeur ayant besoin d'arguments

Manager::Manager(char*n,int q, int d):Employe(n,d),qualification(q)
//C'est la seule notation possible , sauf si il a déjà un constructeur sans paramètre



class Base{
	public:
		Base(){}

		Base(int,int){}


};

	class Derivee:Public Base
		{
			Derivee(int a,int b);


}

Derivee:Derivee(int a , int b):Base(a,b);

piège:Ce qui est en dessous

Derivee:Derivee(int a,int b){
	Base(a,b);

}
Quand on arrive dans l'accolade l'objet base va être crée, je pense avoir initialisé l'objet dérivée mais on a juste crée un objet anonyme qu'on a initialisé avec a et b :ça compile mais c'est un objet qui est à part;




En java:les interfaces c'est des classes :toutes les instances vont devoir implémenter certaines méthodes


En c++:on va indiquer que la méthode Dessine() est une méthode virtuelle mais autant donné que je ne sais pas comment le déclarer
on la déclare virtuelle pure->elle devient une classe abstraite

virtual Dessine()=0;
ça veut dire qu'elle a pas de définition dans l'objet de base
Si la classe dérivée n'implémente pas la méthode ,elle devient elle même abstraite
mais derrière y aura des classes qui vont implémenter 


Soit la classe de base fournit un constructeur sans arguments
Soit dans la classe de base on a plusieurs constructeurs ,on devrait spécifier





Qd on a une :
Derivee Der;

Der.m=1;
Der.p=4;
Der.Base::p=3;// ( 'p' de 'Base' faut spécifier si il y a le meme attribut 
.
On peut appeler une fonction g() même si elle n'est pas issue directement de l'héritage

Polymorphisme:
Manager M;
Employe* PtrE=&M;


l'invocation de PtrE->affiche() est interprété comme un appel à Employe::affiche()


"late binding" 

virtual int f();
ne marche pas avec virtual f();

A partir du moment ou les fonctions sont déclarées comme virtuelles on alourdit le temps d'exécution, et c'est absure au niveau de la conception



class forme
{
public:

	virtual void dessine()=0;


};




Heritage multiple:

et si on en fait on en fait que de façon limitée

En java on utilise les interfaces à la place de l'hérit multile






glace   cube
   glaçon

glaçàn hérite de deux classes


y aura problème si les deux classes glace et cube dérivent d'une seule classe

********************

bouton hérite de rectangle et bouton:




régles d'utilisation:

class C:public A
class D:public A
class E:public C,public D

un objet de E contiendra 


 sous-objets de A



(utiliser virtual pour régler ça)



    A


F	G

    H


le fait de déclarer un héritage virtulel , fait partager A entre C et D 

	
En java on peut figer l'héritage d'une classe







Resolution d'ambiguités:

supprimer les constructeurs dans X et Y 
et dans la classe Z , k'appelle le constructeur de X et de Y mais surtout celui de W


Z::Z(int m):X(m),Y(m),W(m)




class D:public B
	protcted
	private



quelle accéssibilité on donne à ce qu'on a hérité
Si on fait une dérivation
 publique , ce qui est pub je vais le rendre publique et ce qui est protégé dans la classe de base devient protégé (rien ne change)
dérivation protégé:ce qui était public devient protégé



exemple:


pour empecher l'appelation direct de vehicule, c'est soint on crée une fonction affiche abstraite
soit on rend le constructeur protected


class Base
{
	public:
	int p_pubic;


	protected:
	int p_protected;



}




class Derivee :protected les données publiques deviendront protected





destructeur virtuel:

class Employe{

public:
	Employe (char*,int);
	virtual ~Employe(){/*......*/}





Un manipulateur est une fonction qui va petre intégrée dans le flux et qui va modifier la largeur d'un champ
il est la pour créer le format du printf

ex:


int n=242;

cout <<"0x"<<hex<<n <<endl;//0xf2
Le manipulateur setprecision() prend pour argument la précision d'affichage pour les valeurss en vir flottante
ex


pour 12.23 qui va s'afficher 12.230000000
setprecision(2)<<x
12.23


autre manipulateur setw()

pour afficher le 001 au lieu de 1

<<setw(3)<<setfill(0)<<//setw(3) pour réserver 3 caractéres , et setfill(0) va la mettre sous la forme de 001
*****


*****
Les patrons de classes
:
class Pile_Int

{


int Tab[MAX],int NbElt,

public:
void Push (int i){Tab[nbrElt++]=i;}


int Get(){return Tab[..nbrElt];}

Pile():NbElt(0)}}




Syntaxe: template<class T>


	class nom_class
{


		T*p;


		T f();


};





class Pile

{
	T Tab[Max];
	int NbElt;
	public:
		void Push(const T &i);
	
	T Get();
	Pile

Quand je vais appeler <Date> alors que Date n'a pas de constructeur sans arguments, il y aura une erreur

		
Si on définit la fonction membre à l'ext on fait tjrs ça:
template <class T>
	void pile<T>::empile(T v);
/:

}


Tempalte<class T> class vecteur {
T v[t]




}


c1 <type1,....,typen>

********

On peut créer aussi un patron de fonctions
ecrire une fonction vec des types simples puis remplacer avec patron

template<liste_arguments_patrons>
	type_retour nom_fonction (liste_arguments_fonctions)



template<class T> T* f1(T a,T b);

on a déclaré une fonction f1 , et un patron de fonction qui prend comme argument T et on a mis T en argument de la fonctions f1
donc ok , ils ont été utilisé au moins une fois




templare<class T>void Tri (Vect<T>&v)

{


int n=v.taille();


....

}


void f (Vect<int>& vi,Vect<String>& vs,Vect<char *>& vpc){


tri (vi);//appelle tri (Vect<int>& v);



tri(vs);//appelle tri (Vect<String>& v);

tri(vps);appelle tri (Vect<char*>& v);
}

On peut spécifier explicitement une version appropriée de tri () pour un type particulier:

void tri(Vect<char*>&V)

{
int n=v.taille();


for (int i=0;i<n;i++)
	if(strcmp(v[j],v[j-1])<0)
	
}


*******Regles de résolution de la surcharge))*******





exceptions:Principes;



throw(qqchose);


catch(....)

{

//traiter l'exeption


void

throw zero() , le quelquechose peut etre n
on peut pas faire de return dans un gestionnaire de return





int ff(int b){
	try
{
	f(b);
}
catch(zerou)


}


S
void g(){



******************

pder=dynamic_cast<derivee*>(pbas);

si pbas contient pder , il va affecter avec réussite
sinon çasera NULL


if(p.Der!=NULL)


bibliothèque exceptions:
déclencher une exeption dans le constructeur n'est pas la meilleure idée


si on veut que debordement nous renvoie l'erreur renvoyée :
Dans le constructeur débordement on range la valeur val envoyée par throw Debordement(val),

et dans le catch(debordement d){
cout<<"Debordement"<<d.getVel());

}




!!!!TRES IMPORTANT!!!!!

ASSIGNEMENT=
Class member access->
Subscripting[]
Function Call()
			
	can be overloaded only as non static members


These functions can NEVER be overloaded by friend functions	
		
}










Derniere séance:
	contenairs -iterators-algorithms


iterator :pointeurs sur les éléments du conteneurs
permet de parcourir les éléments des conteneurs va retourner un élément du conteneur si on lui demande

les algorithmes vont travailler avec les itérateur mais pas avec le type des conteneurs




conteneur associatif :à voir comme un dictionnaire
on associe à l'élément une clef
on le retrouve avec la clef


le contenu d'un conteneur est une collection



on peut créer un iterator sépcifique à une classe list:je créer une classe iterator à l'interieur de la liste
li::iterator i=l.begin();



li::iterator i:ça compte sur le premier élément de la liste
i pointe sur le premier élément de la liste
i++ passe à l'élément suivant



*map:

vector <int>v=
nt sum=0;
for(int i=0;i<v.size();i++)
	sum+=v[i];

int sum=0;
for
for(int x:v)sum+=x


int sum=for_each(v.begin(),v.end(),Adder());


Adder c'est un cosntructeur


class Adder{

private:int_sum;

public:Adder():_sum(0){}

	void operator(){int&i)


functor une classe qui surcharge ()
-->ADDER()



***librairie algorithme******
on peut implémenter sa prore fonction de tri et le passer en paramètre



v est une collection et chaque élément x est de type entier



****Pour utiliser le polymorphisme , il faut virtual+référence ou pointeur



